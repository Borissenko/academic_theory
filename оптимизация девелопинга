конспект лекции https://www.youtube.com/watch?v=pyAYbbDJjPo


=== ПРОБЛЕМЫ сайтостроения и их решения ===

ПРИНЦИПЫ
минимум запросов на сервер
лучше запрашивать не 5 маленьких, а 1 большой файл
модульность - не грузим лишнее
пин до сервера в Канаде
минификация файлов


РЕШЕНИЯ
 
А. КОД

1. БЭМ + BEM-tools (компиляция и т.д. БЭМ-файлов, на node написаны)
l -уровень
b -блоки
e -элемент
js-для js
_ - модификатор

но названия получаются оч длинными...

2. Sass
- переменные
- операторы вычисления (оперратор цикла- и он генерирует пачку схожих по формату классов)
- миксины
- принцип DRY (do not repite to youself) - не повторяй себя. Для этого есть переменные и миксины.

3. Web-КОМПОНЕНТЫ, принцип модульности
У компонента есть собственный html, js, css и JSON-с комментариями по данному компоненту !! )), моковые данные.
 
Шаблоны и кастомные элементы(тэги)- непонятная и ненужная область


Б. ПРОБЛЕМЫ С ЗАГРУЗКОЙ
1. сократить вес кода
 а) при сборке проекта
   -задействовать зависимости
   -скомпилировать sass
   -минифицировать css и js
   -прогнать через линт
   -сжать изображения
   -минифицировать html на стороне nginx'a (убрать коментарии, пробелы и т.д.)
   -тесты
   -запрашивать с сервера данные в виде zip-архива (by nginx)
   
 б) сборка проекта by Gulp(не Grunt, т.к. у Grunt оч сложная конфигурация) 
дерективы gulp  //см 55-01- пример кода gulp'a
gulp.task
 - обозначаем пути к css, например.
 - применяем .pipe(scss())- pipe() закидывает входной аргумент в функцию scss(), а далее 
   .pipe(minifyCSS())
gulp.watch
   

2. сократить кол-во запросов
3. сократить растояние до сервера
4. использовать cash
5. для хранения оч большого кол-ва фоток использовать Riak (!)
6. между пользователем и сервером поставить Нр: CloudFlare или nginx, который запросы от пользователя к неизменным файлам отдает сам, не утруждая серевер, и проверяет изредко- изменился ли на сервере кэшируемый CloudFlare'ом файл-картинка.
- это CDN(!), балансеры

7. не обязательно на страницу закачивать все данные для нее. М.б. пользователь на этой стр просто щелкнет 1 кнопку и перейдет дальше..., т.е. эта стр- проходная.




В. НЕОТЗЫВЧИВЫЙ ИНТЕРФЕЙС
- нужен SPA, всё получаем по API, а не грузим новую, полностью прорендеренную на сервере страницу с обновленными данными.

Г. API- htpp:// по REST
 - для безопасности надо 
   -разделить внешний(пользователь что-то шлет) и внутренний(по ним работает сайт) API на 2 разных хоста
   -использовать CORS (кроссдоменные запросы).


Г. ШАБЛОНИЗАЦИЯ

Д. СКУДНОСТЬ ВОЗМОЖНОСТЕЙ
  web components - polimer
  web socket
  препроцессоры:
   - html - Slim
   - css  - sass
   - js   - TypeScript, CoffeeScript


Е. САЙТ- НЕ ПРИЛОЖЕНИЕ






